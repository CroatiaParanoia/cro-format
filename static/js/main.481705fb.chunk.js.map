{"version":3,"sources":["components/Button/index.tsx","components/Editor/index.tsx","components/Space/index.tsx","pages/play/index.tsx","infect.ts","Router/historyContext.ts","Router/Router.tsx","Router/Switch.tsx","Router/Route.tsx","event.ts","message/index.ts","pages/actuator/index.tsx","App.tsx","serviceWorker.ts","globalEventBus.ts","log.ts","index.tsx"],"names":["Button","children","props","className","Editor","options","selectOnLineNumbers","fontSize","width","height","language","theme","Space","size","React","Children","toArray","map","item","index","key","style","display","padding","defaultTemplate","Play","useState","input","setInput","output","setOutput","useEffect","window","T","format","infect","value","pre","JSON","stringify","run","useCallback","eval","err","editorBoxDidMount","e","viewBoxDidMount","updateOptions","readOnly","backgroundColor","src","alt","onClick","marginLeft","marginRight","formatOnPaste","editorDidMount","onChange","v","extractReturnValue","obj","callback","origin","createContext","urlPath","Router","forceUpdate","URL","location","href","hash","replace","handleHashChange","addEventListener","removeEventListener","historyContext","Provider","Switch","useContext","find","path","Route","component","createElement","Message","events","eventType","eventItem","this","push","callbackFn","bind","once","done","eventArr","forEach","ele","idx","splice","params","typeOf","Object","prototype","toString","call","slice","OnMessageKey","Symbol","locationOrigin","CONTEXT_KEY","context","parent","opener","getContext","event","defaultValue","newValue","parse","jsonSafeParse","data","source","console","log","type","payload","postMessage","Event","Actuator","message","useMemo","handleInputChange","on","off","App","Boolean","hostname","match","globalEventBus","emit","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.481705fb.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Button: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>> = ({\n  children,\n  ...props\n}) => {\n  return (\n    <button className=\"f-button\" {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport MonacoEditor, { MonacoEditorProps } from 'react-monaco-editor';\n\nconst Editor: React.FC<MonacoEditorProps> = (props) => {\n  const options = {\n    selectOnLineNumbers: true,\n    fontSize: 18,\n    ...(props.options || {})\n  };\n  return (\n    <MonacoEditor\n      width=\"100%\"\n      height=\"100%\"\n      language=\"javascript\"\n      theme=\"vs-dark\"\n      {...props}\n      options={options}\n    />\n  );\n};\n\nexport default Editor;\n","import React from 'react';\n\nconst Space: React.FC<{ size?: number }> = ({ children, size = 4 }) => {\n  return (\n    <>\n      {React.Children.toArray(children).map((item, index) => {\n        return (\n          <span key={index} style={{ display: 'inline-block', padding: `0px ${size}px` }}>\n            {item}\n          </span>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Space;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { typeCreator as T, format } from 'ffformat';\n\nimport Editor from './../../components/Editor';\nimport Button from './../../components/Button';\nimport Space from './../../components/Space';\nimport infect from './../../infect';\n\nimport './style.css';\nimport { EditorDidMount } from 'react-monaco-editor';\n\nconst defaultTemplate = `const originData = { \n  name: 'croatia', \n  age: '21', \n  skillId: ['1', '2', '3', '4']\n };\n\nconst type = T.object({ \n  name: T.string(), \n  age: T.number(), \n  skillId: T.array(T.number()) \n});\n\nformat(\n  originData,\n  type\n);\n`;\n\nfunction Play() {\n  const [input, setInput] = useState(defaultTemplate);\n  const [output, setOutput] = useState('');\n\n  useEffect(() => {\n    // @ts-ignore\n    window.T = T;\n    // @ts-ignore\n    window.format = format;\n\n    infect(window, 'format', (value: any) => {\n      setOutput((pre) => pre + JSON.stringify(value, null, 2) + '\\n');\n    });\n\n    // const handleConsoleLog = ({ params }: any) => {\n    //   setOutput(\n    //     (pre) => pre + params.map((v: any) => JSON.stringify(v, null, 2)).join('\\n') + '\\n'\n    //   );\n    // };\n    // globalEventBus.on('consoleLog', handleConsoleLog);\n    // return () => {\n    //   globalEventBus.off('consoleLog', handleConsoleLog);\n    // };\n  }, []);\n\n  const run = useCallback(() => {\n    try {\n      setOutput('');\n      // eslint-disable-next-line\n      eval(input);\n    } catch (err) {\n      setOutput(err);\n    }\n  }, [input]);\n\n  const editorBoxDidMount: EditorDidMount = useCallback((e) => {}, []);\n\n  const viewBoxDidMount = useCallback((e: any) => {\n    e.updateOptions({ readOnly: true });\n  }, []);\n\n  return (\n    <div className=\"container df fdc\">\n      <header style={{ backgroundColor: 'yellow', padding: 4 }}>\n        <img\n          width=\"120\"\n          src=\"https://raw.githubusercontent.com/CroatiaParanoia/ffformat/master/ffformat_logo.png\"\n          alt=\"\"\n        />\n      </header>\n      <div className=\"header df\">\n        <div className=\"f1 df\">\n          <span className=\"title\">Input</span>\n          <Space>\n            <Button onClick={() => setInput('')}>clear</Button>\n            <Button onClick={() => run()}>run</Button>\n          </Space>\n        </div>\n        <div className=\"f1 df\" style={{ marginLeft: 8 }}>\n          <span className=\"title\">Output</span>\n          <Space>\n            <Button onClick={() => setOutput('')}>clear</Button>\n          </Space>\n        </div>\n      </div>\n      <div className=\"f1 df\">\n        <div className=\"f1\" style={{ marginRight: 2 }}>\n          <Editor\n            options={{ formatOnPaste: true }}\n            editorDidMount={editorBoxDidMount}\n            value={input}\n            language=\"javascript\"\n            onChange={(v) => setInput(v)}\n          />\n        </div>\n        <div className=\"f1\">\n          <Editor\n            value={output}\n            editorDidMount={viewBoxDidMount}\n            language=\"json\"\n            onChange={() => setOutput(input)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Play;\n","export default function extractReturnValue(\n  obj: Record<string, any>,\n  key: string,\n  callback: Function\n) {\n  const origin = obj[key];\n\n  obj[key] = (...params: any[]) => {\n    const value = origin(...params);\n    callback(value);\n  };\n}\n","import React from 'react';\n\nconst defaultHistory = {\n  urlPath: ''\n};\n\nexport type CustomHistory = typeof defaultHistory;\n\nexport default React.createContext(defaultHistory);\n","import React, { useEffect, useState } from 'react';\nimport historyContext from './historyContext';\n\nconst Router: React.FC = ({ children }) => {\n  const [, forceUpdate] = useState(0);\n  const urlPath = new URL(window.location.href).hash.replace('#', '');\n\n  useEffect(() => {\n    const handleHashChange = () => {\n      forceUpdate((v) => v + 1);\n    };\n    window.addEventListener('hashchange', handleHashChange);\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  }, []);\n\n  return <historyContext.Provider value={{ urlPath }}>{children}</historyContext.Provider>;\n};\n\nexport default Router;\n","import React from 'react';\n\nimport historyContext from './historyContext';\n\nconst Switch: React.FC = ({ children }) => {\n  const { urlPath } = React.useContext(historyContext);\n\n  return <>{React.Children.toArray(children).find((v: any) => v.props.path === urlPath) || null}</>;\n};\n\nexport default Switch;\n","import React from 'react';\n\nimport historyContext from './historyContext';\n\ninterface RouteProps {\n  component: React.FC;\n  path: string;\n}\n\nconst Route: React.FC<RouteProps> = ({ path, component }) => {\n  const { urlPath } = React.useContext(historyContext);\n  return urlPath === path ? React.createElement(component) : null;\n};\n\nexport default Route;\n","interface EventItem {\n  eventType: string;\n  callbackFn: Function;\n  once: boolean;\n  done: boolean;\n}\n\nexport default class Message {\n  private events: Record<string, any[]> = {};\n\n  private bind(eventType: string, eventItem: EventItem) {\n    if (this.events[eventType]) {\n      this.events[eventType].push(eventItem);\n    } else {\n      this.events[eventType] = [eventItem];\n    }\n  }\n\n  public on(eventType: string, callbackFn: Function) {\n    this.bind(eventType, {\n      eventType,\n      callbackFn,\n      once: false,\n      done: false\n    });\n  }\n\n  // once() 方法，用于绑定只能触发一次的自定义事件\n  public once(eventType: string, callbackFn: Function) {\n    this.bind(eventType, {\n      eventType,\n      callbackFn,\n      once: true,\n      done: false\n    });\n  }\n  // off() 方法，用于解绑自定义事件\n\n  public off(eventType: string, callbackFn: Function) {\n    const eventArr = this.events[eventType] || [];\n\n    eventArr.forEach((ele, idx) => {\n      if (ele.callbackFn === callbackFn) {\n        eventArr.splice(idx, 1);\n      }\n    });\n  }\n\n  public clear(eventType: string) {\n    this.events[eventType] = [];\n  }\n\n  // emit() 方法，用于触发事件模型中指定类型的自定义事件\n  public emit(eventType: string, params?: any) {\n    const eventArr = this.events[eventType] || [];\n    eventArr.forEach((ele, idx) => {\n      if (!ele.done) {\n        ele.callbackFn(params);\n        if (ele.once) {\n          eventArr[idx].done = true; // 把once注册的事件，标记为“done”\n        }\n      }\n    });\n  }\n\n  public destroy() {\n    this.events = {};\n  }\n}\n","import Event from './../event';\n\nexport function typeOf(value: any) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\n\nexport function jsonSafeParse(value: any, defaultValue: any) {\n  if (typeOf(value) === 'String') {\n    try {\n      const newValue = JSON.parse(value);\n\n      if (typeOf(newValue) !== typeOf(defaultValue)) return defaultValue;\n\n      return newValue;\n    } catch {\n      return defaultValue;\n    }\n  }\n  return value ?? defaultValue;\n}\n\nconst OnMessageKey = Symbol('OnMessageKey');\n\nconst CURRENT_ORIGIN_KEY = 'playground';\n\nconst locationOrigin = window.location.origin;\n\nconst CONTEXT_KEY = Symbol('context');\n\nconst getContext = (context?: Window): Window | null => {\n  if (context) return context;\n  return window.parent === window ? window.opener : window.parent;\n};\n\nexport default class Message extends Event {\n  [CONTEXT_KEY]: Window | null = null;\n  [OnMessageKey](event: any) {\n    if (event.origin !== locationOrigin) {\n      return;\n    }\n    const { data, source } = jsonSafeParse(event.data, {});\n    if (source === CURRENT_ORIGIN_KEY) {\n      console.log(data, 'datadatadatadata');\n      const { type, payload } = data;\n\n      super.emit.call(this, type, payload);\n    }\n  }\n\n  constructor(context?: any) {\n    super();\n    this[CONTEXT_KEY] = getContext(context);\n    this[OnMessageKey] = this[OnMessageKey].bind(this);\n    window.addEventListener('message', this[OnMessageKey]);\n  }\n\n  destroy() {\n    super.destroy.call(this);\n    window.removeEventListener('message', this[OnMessageKey]);\n  }\n\n  emit(eventType: string, params?: any) {\n    const data = JSON.stringify({\n      data: { type: eventType, payload: params },\n      source: CURRENT_ORIGIN_KEY\n    });\n    console.log(data, 'datadatadata');\n\n    this[CONTEXT_KEY]?.postMessage(data, window.location.origin);\n  }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport Message from '../../message';\n\nconst Actuator = () => {\n  const message = useMemo(() => new Message(), []);\n\n  useEffect(() => {\n    const handleInputChange = (payload: any) => {\n      console.log('actuator - inputChange', payload);\n    };\n    message.on('inputChange', handleInputChange);\n\n    return () => {\n      message.off('inputChange', handleInputChange);\n    };\n  }, [message]);\n\n  return <div>123</div>;\n};\n\nexport default Actuator;\n","import React from 'react';\nimport './App.css';\nimport { Router, Route, Switch } from './Router';\nimport Play from './pages/play';\nimport Actuator from './pages/actuator';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router>\n        <Switch>\n          <Route path=\"/play\" component={Play} />\n          <Route path=\"/actuator\" component={Actuator} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Event from './event';\n\nexport default new Event();\n","import globalEventBus from './globalEventBus';\n\nconst log = window.console.log;\n\nconsole.log = (...params: any[]) => {\n  globalEventBus.emit('consoleLog', { params: params });\n  log(...params);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './log';\n\nReactDOM.render(<App />, document.getElementById('root'), () => {\n  console.log('render - end ');\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}